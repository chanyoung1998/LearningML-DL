# -*- coding: utf-8 -*-
"""BreamAndSmelt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/chanyoung1998/968f49b539923648ad7c396c12e1f65d/breamandsmelt.ipynb

생선의 길이와 무게 초기화 단계
길이와 무게는 **특성**이라고 한다.
"""

bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

"""bream 데이터를 matplotlib를 이용하여 그래프로 표현

"""

import matplotlib.pyplot as plt

plt.scatter(bream_length,bream_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show

smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]
plt.scatter(smelt_length,smelt_weight)
plt.show()

"""smelt와 bream데이터를 하나의 그래프에 표현"""

plt.scatter(smelt_length,smelt_weight)
plt.scatter(bream_length,bream_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

"""# 첫 번째 머신러닝 프로그램
-  **k-최근접 이웃 알고리즘**
을 이용해서 도미와 빙어 데이터를 구분

"""

length = bream_length + smelt_length
weight = bream_weight + smelt_weight
fish_data = [[l,w] for l,w in zip(length,weight)]
fish_target = [1] *35 + [0] * 14
print(fish_data) #훈련 데이터의 특성
print(fish_target) # 훈련 데이터의 값 1은 도미 ,0은 빙어

"""fish_data와 fish_target을 kn에 전달하여 도미를 찾기 위한 기준을 학습시킨다. 사이킷런에서는 fit()가 훈련시키는 역할을 한다"""

from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier()
kn.fit(fish_data,fish_target)
kn.score(fish_data,fish_target) #kn모델이 얼마나 잘 훈련되었는지 평가하는 것 0~1.0사이 값 반환
kn.predict([[30,600]])

#본문 64쪽 4번 문제
for n in range(5,50):
  kn.n_neighbors = n
  score = kn.score(fish_data,fish_target)

  if score < 1:
    print(n,score)